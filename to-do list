import tkinter as tk
from tkinter import messagebox
class TodoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List App")
        self.root.geometry("500x400")
        self.root.resizable(True, True)  
        self.tasks = []
        self.task_vars = []

        title_label = tk.Label(root, text="To-Do List", font=('Arial', 24, 'bold'))
        title_label.pack(pady=10)

        self.task_entry = tk.Entry(root, width=50, font=('Arial', 16))
        self.task_entry.pack(pady=10)

        add_button = tk.Button(root, text="Add Task", command=self.add_task, font=('Arial', 12), bg='violet')
        add_button.pack(pady=5)

        self.task_frame = tk.Frame(root)
        self.task_frame.pack(pady=20)

        button_frame = tk.Frame(root)
        button_frame.pack(pady=20)

        delete_button = tk.Button(button_frame, text="Delete Task", command=self.delete_task, font=('Arial', 12), bg='lightpink')
        delete_button.grid(row=0, column=0, padx=5)

        delete_all_button = tk.Button(button_frame, text="Delete All Tasks", command=self.delete_all_tasks, font=('Arial', 12), bg='lightpink')
        delete_all_button.grid(row=0, column=1, padx=5)

        update_button = tk.Button(button_frame, text="Update Task", command=self.update_task, font=('Arial', 12), bg='lightgreen')
        update_button.grid(row=0, column=2, padx=5)

        exit_button = tk.Button(button_frame, text="Exit", command=root.quit, font=('Arial', 12), bg='red')
        exit_button.grid(row=0, column=3, padx=5)

    def add_task(self):
        task_string = self.task_entry.get()
        if not task_string:
            messagebox.showwarning("Warning", "Please enter a task.")
            return

        self.tasks.append(task_string)
        var = tk.IntVar()
        self.task_vars.append(var)

        checkbutton = tk.Checkbutton(self.task_frame, text=task_string, variable=var, command=self.update_task_status)
        checkbutton.pack(anchor='w')

        self.task_entry.delete(0, 'end')

    def update_task_status(self):
        for i, var in enumerate(self.task_vars):
            if var.get() == 1:
                print(f"Task '{self.tasks[i]}' is completed.")
            else:
                print(f"Task '{self.tasks[i]}' is not completed.")

    def delete_task(self):
        for i in reversed(range(len(self.task_vars))):
            if self.task_vars[i].get() == 1:
                del self.tasks[i]
                del self.task_vars[i]
                self.task_frame.winfo_children()[i].destroy()  
        self.update_task_status()

    def delete_all_tasks(self):
        self.tasks.clear()
        self.task_vars.clear()
        for widget in self.task_frame.winfo_children():
            widget.destroy()  

    def update_task(self):
        selected_task_index = None
        for i, var in enumerate(self.task_vars):
            if var.get() == 1:
                selected_task_index = i
                break

        if selected_task_index is not None:
            new_task_string = self.task_entry.get()
            if not new_task_string:
                messagebox.showwarning("Warning", "Please enter a new task.")
                return

            self.tasks[selected_task_index] = new_task_string
            self.task_frame.winfo_children()[selected_task_index].config(text=new_task_string)
            self.task_entry.delete(0, 'end')
        else:
            messagebox.showwarning("Warning", "Please select a task to update.")

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoListApp(root)
    root.mainloop()
